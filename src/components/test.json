{
  "quotes": {
    "quote1": {
      "content": "citat 1",
      "story": "story1",
      "locations": {
        "location1": true
      }
    },
    "quote2": {
      "content": "citat 2",
      "story": "story2",
      "locations": {
        "location2": true
      }
    },
    "quote3": {
      "content": "citat 3",
      "story": "story3",
      "locations": {
        "location1": true
      }
    }
  },
  "stories": {
    "story1-2": {
      "content": "asdasdasd",
      "quotes": {
        "quote1": true,
        "quote2": true
      }
    },
    "story2": {
      "content": "asdasdasd2",
      "quotes": {
        "quote3": true
      }
    }
  }
}
quotes
// Get a Firebase reference to the 'quotes' collection
var quotesRef = firebase.database().ref('quotes');

// Query for quotes with a specific latitude and longitude
var query = quotesRef.orderByChild('lat').equalTo(123).orderByChild('long').equalTo(123);

// Attach a listener for the 'value' event to retrieve the matching quotes
query.on('value', function(snapshot) {
    snapshot.forEach(function(childSnapshot) {
        var quoteKey = childSnapshot.key;
        var quoteData = childSnapshot.val();
        // Process the quote data
    });
});
story

async function getStoryByQuote(quote) {
  // Get a reference to the Firebase database
  const databaseRef = firebase.database().ref();

  // Retrieve the entire stories object
  const storiesRef = databaseRef.child("stories");
  const storiesSnapshot = await storiesRef.once("value");
  const stories = storiesSnapshot.val();

  // Loop through each story and check if it contains the given quote
  for (const storyId in stories) {
    const story = stories[storyId];
    const quotes = story.quotes;

    // Check if the story contains the given quote
    if (quotes[quote]) {
      // Return the story if it contains the given quote
      return { id: storyId, ...story };
    }
  }

  // Return null if no story contains the given quote
  return null;
}

